'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
%INCLUDE "lserr.lss"
'Uselsx "*lsxlc"
Uselsx "*javacon"
%INCLUDE "lsconst.lss"
'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class ErrorHandler
Declare Class ErrorHandlerWJ As ErrorHandler
Declare Function RaiseError() As String
Declare Sub DbgMsg(txt As String)
Declare Sub Initialize
Declare Function RaiseErrorMsg()
Declare Sub Alert(s As String)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const ERR_FIELDFORMAT=1100
Const ERR_CHILDSOURCE=1200
Const MSG_FIELDFORMAT="индекс вне диапозона массива форматирования"
Const MSG_CHILSOURCE={элемент списка "0" д.б. равен имени view}
Dim debug As Boolean

Class ErrorHandler
	
	Sub ClrError()
	End Sub
	Sub New()
		Call Me.ClrError()
	End Sub
	Function GetModuleInfo() As String
		Dim thisType As String, modInfo As String	
		thisType= Typename(Me)
' Not a class, use the calling module instead
		If (thisType = "") Then thisType = Getthreadinfo(11)
		modInfo = thisType & "::" & Getthreadinfo(10) & ": "
		GetModuleInfo=modInfo
	End Function
	Function RaiseError() As String
		Dim es As String
		es=GetModuleInfo()
		If (Err = 0) Then
			es = es + "Manually raised an error"
		Else
			es = es + "Run time error: (" + Trim(Str(Err)) + ") " + Error$ + " at line: "+ Trim(Str(Erl))
		End If
		Print es
		Me.RaiseError=es
		Call Me.ClrError()
	End Function
End Class

Class ErrorHandlerWJ As ErrorHandler
	Private jSession As JavaSession	
	Private jError As JavaError	
	Sub New()
		On Error Goto errorhandler
		Set jSession= New JAVASESSION
ExitFunction:
		Exit Sub
errorhandler:
		Call ErrorHandler..RaiseError()
		Resume ExitFunction
	End Sub
	Function RaiseError() As String
		Set jError = jSession.getLastJavaError()
		Dim es As String
		If (jError.errorMsg = "") Then		
			es=ErrorHandler..RaiseError()
		Else
			es=GetModuleInfo()+"Error at line " & Erl & ": " & jError.errorMsg
			Print es
			jSession.ClearJavaError			
		End If
		RaiseError=es
	End Function
End Class

'++LotusScript Development Environment:2:1:RaiseError:1:8
Function RaiseError() As String
	Dim thisType As String
	Dim es As String
'thisType = Typename(Me)
' Not a class, use the calling module instead
	If (thisType = "") Then thisType = Getthreadinfo(11)
	es = thisType & "::" & Getthreadinfo(10) & ": "
	If (Err = 0) Then
		es = es + "Manually raised an error"
	Else
		es = es + "Run time error: (" + Trim(Str(Err)) + ") " + Error$ + " at line: "+ Trim(Str(Erl))
	End If
	Print es
	RaiseError=es
End Function

'++LotusScript Development Environment:2:2:DbgMsg:1:8
Sub DbgMsg(txt As String)
	If (debug) Then Print txt
End Sub
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	debug=False
End Sub
'++LotusScript Development Environment:2:1:RaiseErrorMsg:1:8
Function RaiseErrorMsg()
	Dim thisType As String
	Dim es As String
'thisType = Typename(Me)
' Not a class, use the calling module instead
	If (thisType = "") Then thisType = Getthreadinfo(11)
	es = thisType & "::" & Getthreadinfo(10) & ": "
	If (Err = 0) Then
		es = es + "Manually raised an error"
	Else
		es = es + "Run time error: (" + Trim(Str(Err)) + ") " + Error$ + " at line: "+ Trim(Str(Erl))
	End If
	Msgbox es
End Function
'++LotusScript Development Environment:2:2:Alert:1:8
Sub Alert(s As String)
	Messagebox s, MB_OK+MB_ICONSTOP
End Sub