'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
UseLSX "*javacon"
%Include "lserr.lss"
'Uselsx "*lsxlc"
%Include "lsconst.lss"


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class ErrorHandler
Declare Class ErrorHandlerWJ As ErrorHandler
Declare Sub Initialize
Declare Sub Terminate
Declare Function RaiseErrorMsg()
Declare Sub DbgMsg(txt As String)
Declare Function RaiseError() As String
Declare Sub Alert(s As String)
Declare Function LogMsg(curLine As Long, msg As String)

'++LotusScript Development Environment:2:5:(Declarations):0:10
Const ERR_FIELDFORMAT=1100
Const ERR_CHILDSOURCE=1200
Const MSG_FIELDFORMAT="индекс вне диапозона массива форматирования"
Const MSG_CHILSOURCE={элемент списка "0" д.б. равен имени view}
Dim debug As Boolean
Dim log2file As Boolean

Dim logStream As NotesStream
Private ses As NotesSession
Private db As NotesDatabase

Class ErrorHandler
	
	Sub ClrError()
	End Sub
	Sub New()
		Call Me.ClrError()
	End Sub
	Function GetModuleInfo() As String
		Dim thisType As String, modInfo As String	
		thisType= Typename(Me)
' Not a class, use the calling module instead
		If (thisType = "") Then thisType = Getthreadinfo(11)
		modInfo = thisType & "::"
		GetModuleInfo=modInfo
	End Function
	Function RaiseError() As String
		Dim es As String
		es=Me.GetModuleInfo()& GetThreadInfo(10) & ": "
		If (Err = 0) Then
			es = es + "Manually raised an error"
		Else
			es = es + "err. (" + Trim(Str(Err)) + ") " + Error$ + " l. "+ Trim(Str(Erl))
		End If
		Print es
		Me.RaiseError=es & Chr(10)
		If (Not logStream Is Nothing) And log2file Then Call logStream.WriteText(es,EOL_PLATFORM)
		Call Me.ClrError()
	End Function
	%REM
		Function ErrInfo
		Description: Comments for Function
	%END REM
	Function ErrInfo(callerName As String)
		If Len(callerName)<1 Then
			callerName= Me.GetModuleInfo & GetThreadInfo(LSI_THREAD_CALLPROC) & {: }
		Else
			callerName= Me.GetModuleInfo & callerName & {: }
		End If
		Dim es As String
		If (Err = 0) Then
			es = callerName + "Manually raised an error"
		Else
			es = callerName + "err. (" + Trim(Str(Err)) + ") " + Error$ + " l. "+ Trim(Str(Erl))
		End If

		Print es
		Me.ErrInfo=es & Chr(10)
		If (Not logStream Is Nothing) And log2file Then _
		Call logStream.WriteText(callerName,EOL_PLATFORM)
		Call Me.ClrError()
	End Function
End Class

Class ErrorHandlerWJ As ErrorHandler
	Private jSession As JavaSession	
	Private jError As JavaError	
	Sub New()
		On Error Goto errorhandler
		Set jSession= New JAVASESSION
ExitFunction:
		Exit Sub
errorhandler:
		Call ErrorHandler..RaiseError()
		Resume ExitFunction
	End Sub
	Function RaiseError() As String
		Set jError = jSession.getLastJavaError()
		Dim es As String
		If (jError.errorMsg = "") Then		
			es=ErrorHandler..ErrInfo(GetThreadInfo(LSI_THREAD_CALLPROC))
		Else
			es=GetModuleInfo() &GetThreadInfo(LSI_THREAD_CALLPROC) _
			& {: } & jError.errorMsg &{; l.}& Erl 
			Print es
			es=es & Chr(10)
			jSession.ClearJavaError			
		End If
		Dim RT, rtObj, mb As Long:mb=CLng(1024)*CLng(1024)
		Set RT=jSession.Getclass({java/lang/Runtime})
		Set rtObj=RT.getRuntime()
		Print {Total Memory:} & CStr(rtObj.totalMemory() \ mb) & {MB}
		Print {Max Memory:} + CStr(rtObj.maxMemory() \ mb) & {MB}
		Print {Free Memory:} & CStr(rtObj.freeMemory() \ mb) & {MB}
		RaiseError=es
		If (Not logStream Is Nothing) And log2file Then Call logStream.WriteText(es,EOL_PLATFORM)
	End Function
End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	debug=False
	Set ses=New NotesSession
	Set db=ses.CurrentDatabase
	Set logStream=ses.CreateStream
	Dim dt As New NotesDateTime({Today})
	dt.SetNow
	Dim fname As String
	fname= {_} &Replace(Replace(Replace(dt.LocalTime,{:},{-}),{ },{_}),{.},{-}) &_
	{#} &db.ReplicaID &_
	{-} &Replace(Getthreadinfo(LSI_THREAD_CALLMODULE),{*},{}) &_
	{.log}
	
	If Not logStream.Open(fname,{UTF-8}) Then
'		logStream=Nothing
	End If
'	Msgbox fname &Chr(10) &logStream.WriteText({*-------------start ------------*})
End Sub


'++LotusScript Development Environment:2:2:Terminate:1:10
Sub Terminate
'	If Not logStream Is Nothing Then logStream.Close
End Sub

'++LotusScript Development Environment:2:1:RaiseErrorMsg:1:8
Function RaiseErrorMsg()
	Dim thisType As String
	Dim es As String
'thisType = Typename(Me)
' Not a class, use the calling module instead
	If (thisType = "") Then thisType = Getthreadinfo(11)
	es = thisType & "::" & Getthreadinfo(10) & ": "
	If (Err = 0) Then
		es = es + "Manually raised an error"
	Else
		es = es + "Run time error: (" + Trim(Str(Err)) + ") " + Error$ + " at line: "+ Trim(Str(Erl))
	End If
	Msgbox es
End Function

'++LotusScript Development Environment:2:2:DbgMsg:1:8
Sub DbgMsg(txt As String)
	If (debug) Then Print txt
End Sub

'++LotusScript Development Environment:2:1:RaiseError:1:8
Function RaiseError() As String
	Dim thisType As String
	Dim es As String
'thisType = Typename(Me)
' Not a class, use the calling module instead
	If (thisType = "") Then thisType = Getthreadinfo(11)
	es = thisType & "::" & Getthreadinfo(10) & ": "
	If (Err = 0) Then
		es = es + "Manually raised an error"
	Else
		es = es + "err. (" + Trim(Str(Err)) + ") " + Error$ + " l."+ Trim(Str(Erl))
	End If
	Print es
	RaiseError=es + Chr(10)
	If (Not logStream Is Nothing) And log2file Then Call logStream.WriteText(es,EOL_PLATFORM)
End Function

'++LotusScript Development Environment:2:2:Alert:1:8
Sub Alert(s As String)
	Messagebox s, MB_OK+MB_ICONSTOP
End Sub

'++LotusScript Development Environment:2:1:LogMsg:1:8
Function LogMsg(curLine As Long, msg As String)
	If (Not logStream Is Nothing) And log2file Then Call logStream.WriteText({#} &Format(Cstr(curLine), {000000}) &{:} &msg,EOL_PLATFORM)
End Function









